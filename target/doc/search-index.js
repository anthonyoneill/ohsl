var searchIndex = JSON.parse('{\
"libm":{"doc":"libm in pure Rust","i":[[5,"acos","libm","Arccosine (f64)",null,[[]]],[5,"acosf","","Arccosine (f32)",null,[[]]],[5,"acosh","","Inverse hyperbolic cosine (f64)",null,[[]]],[5,"acoshf","","Inverse hyperbolic cosine (f32)",null,[[]]],[5,"asin","","Arcsine (f64)",null,[[]]],[5,"asinf","","Arcsine (f32)",null,[[]]],[5,"asinh","","Inverse hyperbolic sine (f64)",null,[[]]],[5,"asinhf","","Inverse hyperbolic sine (f32)",null,[[]]],[5,"atan","","Arctangent (f64)",null,[[]]],[5,"atan2","","Arctangent of y/x (f64)",null,[[]]],[5,"atan2f","","Arctangent of y/x (f32)",null,[[]]],[5,"atanf","","Arctangent (f32)",null,[[]]],[5,"atanh","","Inverse hyperbolic tangent (f64)",null,[[]]],[5,"atanhf","","Inverse hyperbolic tangent (f32)",null,[[]]],[5,"cbrt","","Computes the cube root of the argument.",null,[[]]],[5,"cbrtf","","Cube root (f32)",null,[[]]],[5,"ceil","","Ceil (f64)",null,[[]]],[5,"ceilf","","Ceil (f32)",null,[[]]],[5,"copysign","","Sign of Y, magnitude of X (f64)",null,[[]]],[5,"copysignf","","Sign of Y, magnitude of X (f32)",null,[[]]],[5,"cos","","",null,[[]]],[5,"cosf","","",null,[[]]],[5,"cosh","","Hyperbolic cosine (f64)",null,[[]]],[5,"coshf","","Hyperbolic cosine (f64)",null,[[]]],[5,"erf","","Error function (f64)",null,[[]]],[5,"erfc","","Error function (f64)",null,[[]]],[5,"erfcf","","Error function (f32)",null,[[]]],[5,"erff","","Error function (f32)",null,[[]]],[5,"exp","","Exponential, base e (f64)",null,[[]]],[5,"exp10","","",null,[[]]],[5,"exp10f","","",null,[[]]],[5,"exp2","","Exponential, base 2 (f64)",null,[[]]],[5,"exp2f","","Exponential, base 2 (f32)",null,[[]]],[5,"expf","","Exponential, base e (f32)",null,[[]]],[5,"expm1","","Exponential, base e, of x-1 (f64)",null,[[]]],[5,"expm1f","","Exponential, base e, of x-1 (f32)",null,[[]]],[5,"fabs","","Absolute value (magnitude) (f64) Calculates the absolute…",null,[[]]],[5,"fabsf","","Absolute value (magnitude) (f32) Calculates the absolute…",null,[[]]],[5,"fdim","","Positive difference (f64)",null,[[]]],[5,"fdimf","","Positive difference (f32)",null,[[]]],[5,"floor","","Floor (f64)",null,[[]]],[5,"floorf","","Floor (f32)",null,[[]]],[5,"fma","","Floating multiply add (f64)",null,[[]]],[5,"fmaf","","Floating multiply add (f32)",null,[[]]],[5,"fmax","","",null,[[]]],[5,"fmaxf","","",null,[[]]],[5,"fmin","","",null,[[]]],[5,"fminf","","",null,[[]]],[5,"fmod","","",null,[[]]],[5,"fmodf","","",null,[[]]],[5,"frexp","","",null,[[]]],[5,"frexpf","","",null,[[]]],[5,"hypot","","",null,[[]]],[5,"hypotf","","",null,[[]]],[5,"ilogb","","",null,[[]]],[5,"ilogbf","","",null,[[]]],[5,"j0","","",null,[[]]],[5,"y0","","",null,[[]]],[5,"j0f","","",null,[[]]],[5,"y0f","","",null,[[]]],[5,"j1","","",null,[[]]],[5,"y1","","",null,[[]]],[5,"j1f","","",null,[[]]],[5,"y1f","","",null,[[]]],[5,"jn","","",null,[[]]],[5,"yn","","",null,[[]]],[5,"jnf","","",null,[[]]],[5,"ynf","","",null,[[]]],[5,"ldexp","","",null,[[]]],[5,"ldexpf","","",null,[[]]],[5,"lgamma","","",null,[[]]],[5,"lgamma_r","","",null,[[]]],[5,"lgammaf","","",null,[[]]],[5,"lgammaf_r","","",null,[[]]],[5,"log","","",null,[[]]],[5,"log10","","",null,[[]]],[5,"log10f","","",null,[[]]],[5,"log1p","","",null,[[]]],[5,"log1pf","","",null,[[]]],[5,"log2","","",null,[[]]],[5,"log2f","","",null,[[]]],[5,"logf","","",null,[[]]],[5,"modf","","",null,[[]]],[5,"modff","","",null,[[]]],[5,"nextafter","","",null,[[]]],[5,"nextafterf","","",null,[[]]],[5,"pow","","",null,[[]]],[5,"powf","","",null,[[]]],[5,"remainder","","",null,[[]]],[5,"remainderf","","",null,[[]]],[5,"remquo","","",null,[[]]],[5,"remquof","","",null,[[]]],[5,"round","","",null,[[]]],[5,"roundf","","",null,[[]]],[5,"scalbn","","",null,[[]]],[5,"scalbnf","","",null,[[]]],[5,"sin","","",null,[[]]],[5,"sincos","","",null,[[]]],[5,"sincosf","","",null,[[]]],[5,"sinf","","",null,[[]]],[5,"sinh","","",null,[[]]],[5,"sinhf","","",null,[[]]],[5,"sqrt","","",null,[[]]],[5,"sqrtf","","",null,[[]]],[5,"tan","","",null,[[]]],[5,"tanf","","",null,[[]]],[5,"tanh","","",null,[[]]],[5,"tanhf","","",null,[[]]],[5,"tgamma","","",null,[[]]],[5,"tgammaf","","",null,[[]]],[5,"trunc","","",null,[[]]],[5,"truncf","","",null,[[]]]],"p":[]},\
"ohsl":{"doc":"Oak Hamilton Scientific Library","i":[[0,"elementary","ohsl","",null,null],[5,"test_function","ohsl::elementary","",null,[[]]],[17,"PI","","pi",null,null],[17,"PI_2","","pi/2 ",null,null],[17,"SQRT2","","Square root of 2",null,null],[17,"E","","e",null,null],[0,"constant","ohsl","",null,null],[17,"PI","ohsl::constant","pi",null,null],[17,"PI_2","","pi/2 ",null,null],[17,"SQRT2","","Square root of 2",null,null],[17,"E","","e",null,null],[17,"I","","i",null,null],[0,"complex","ohsl","",null,null],[3,"Complex","ohsl::complex","",null,null],[12,"real","","Real part of the complex number",0,null],[12,"imag","","Imaginary part of the complex number",0,null],[6,"Cmplx","","",null,null],[11,"new","","Create a new complex number ( z = x + iy )",0,[[]]],[11,"conj","","Return the complex conjugate ( z.conj() = x - iy )",0,[[]]],[11,"abs_sqr","","Return the absolute value squared ( |z|^2 = z * z.conj() )",0,[[]]],[11,"abs","","Return the absolute value ( |z| = sqrt( z * z.conj() ) )",0,[[]]],[11,"arg","","Return the phase angle in radians",0,[[]]],[0,"vector","ohsl","",null,null],[3,"Vector","ohsl::vector","",null,null],[6,"Vec64","","",null,null],[11,"empty","","Create a new vector of unspecified size",1,[[]]],[11,"create","","Create a vector from an std::vec::Vec",1,[[["vec",3]]]],[11,"size","","Return the size of the vector ",1,[[]]],[11,"clear","","Remove all of the element from the vector",1,[[]]],[11,"swap","","Swap elements two elements in the vector ",1,[[]]],[11,"push","","Push a new element onto the end of the vector ",1,[[]]],[11,"pop","","Remove the last element from the vector and return it",1,[[]]],[11,"new","","Create a new vector of specified size",1,[[]]],[11,"assign","","Assign a value to every element in the vector",1,[[]]],[11,"zeros","","Create a vector of zeros ",1,[[]]],[11,"ones","","Create a vector of ones",1,[[]]],[11,"resize","","Resize the vector ",1,[[]]],[11,"dot","","Return the dot product of two vectors v.dot(w)",1,[[["vector",3]]]],[11,"sum","","Return the sum of all the elements in the vector",1,[[]]],[11,"sum_slice","","Return the sum of the elements in the vector from index…",1,[[]]],[11,"product","","Return the product of all the elements in the vector",1,[[]]],[11,"product_slice","","Return the product of the elements in the vector from…",1,[[]]],[11,"output","","Print the vector to a file",1,[[]]],[11,"abs","","Return a vector containing the absolute values of the…",1,[[]]],[11,"norm_1","","Return the L1 norm: sum of absolute values ",1,[[]]],[11,"conj","","Return a vector containing the complex conjugate of the…",1,[[]]],[11,"real","","Return a vector containing the real parts of a vector of…",1,[[],["vector",3]]],[11,"linspace","","Create a linearly spaced vector of f64 with n elements…",1,[[]]],[11,"powspace","","Create a nonuniform vector of f64 with n elements with…",1,[[]]],[11,"norm_2","","Return the L2 norm: square root of the sum of the squares",1,[[]]],[11,"norm_p","","Return the Lp norm: p-th root of the sum of the absolute…",1,[[]]],[11,"norm_inf","","Return the Inf norm: largest absolute value element (p ->…",1,[[]]],[0,"traits","ohsl","",null,null],[8,"Operations","ohsl::traits","",null,null],[8,"AssignOperations","","",null,null],[8,"Zero","","",null,null],[10,"zero","","Returns the additive identity element 0",2,[[]]],[8,"One","","",null,null],[10,"one","","Returns the multiplicative identity element 1",3,[[]]],[8,"Number","","",null,null],[8,"Signed","","",null,null],[10,"abs","","",4,[[]]],[0,"matrix","ohsl","",null,null],[3,"Matrix","ohsl::matrix","",null,null],[6,"Mat64","","",null,null],[11,"empty","","Create a new matrix of unspecified size",5,[[]]],[11,"create","","Create a matrix from an std::vec::Vec<Vector>",5,[[["vector",3],["vec",3]]]],[11,"rows","","Return the number of rows in the matrix ",5,[[]]],[11,"cols","","Return the number of columns in the matrix ",5,[[]]],[11,"numel","","Return the number of elements in the matrix ",5,[[]]],[11,"clear","","Remove all the elements from the matrix ",5,[[]]],[11,"new","","Create a new matrix of specified size",5,[[]]],[11,"get_row","","Get a row of the matrix as a vector",5,[[],["vector",3]]],[11,"get_col","","Get a column of the matrix as a vector ",5,[[],["vector",3]]],[11,"set_row","","Set a row of the matrix using a vector ",5,[[["vector",3]]]],[11,"set_col","","Set a column of the matrix using a vector ",5,[[["vector",3]]]],[11,"delete_row","","Delete a row from the matrix ",5,[[]]],[11,"multiply","","Multiply the matrix by a (column) vector and return a…",5,[[["vector",3]],["vector",3]]],[11,"eye","","Create a square identity matrix of specified size ",5,[[]]],[11,"resize","","Resize the matrix (empty entries are appended if necessary)",5,[[]]],[11,"transpose_in_place","","Transpose the matrix in place ",5,[[]]],[11,"transpose","","Return the transpose of the matrix ",5,[[],["matrix",3]]],[11,"swap_rows","","Swap two rows of the matrix ",5,[[]]],[11,"swap_elem","","Swap two elements of the matrix ",5,[[]]],[11,"fill","","Fill the matrix with specified elements",5,[[]]],[11,"fill_diag","","Fill the leading diagonal of the matrix with specified…",5,[[]]],[11,"fill_band","","Fill a diagonal band of the matrix with specified elements…",5,[[]]],[11,"fill_tridiag","","Fill the main three diagonals of the matrix with specified…",5,[[]]],[11,"solve_basic","","Solve the system of equations Ax=b where b is a specified…",5,[[["vector",3]],["vector",3]]],[11,"lu_decomp_in_place","","Replace the matrix with its LU decomposition and return…",5,[[]]],[11,"solve_lu","","Solve the system of equations Ax=b where b is a specified…",5,[[["vector",3]],["vector",3]]],[11,"determinant","","Calculate the determinant of the matrix ( via LU…",5,[[]]],[11,"inverse","","Return the inverse of the matrix ( via LU decomposition )",5,[[],["matrix",3]]],[11,"norm_1","","Return the matrix one-norm (max absolute column sum)",5,[[]]],[11,"norm_inf","","Return the matrix inf-norm (max absolute row sum)",5,[[]]],[11,"norm_p","","Return the matrix p-norm (p=2 is Frobenius, p=inf is max…",5,[[]]],[11,"norm_frob","","Return the matrix Frobenius norm ",5,[[]]],[11,"norm_max","","Return the entrywise max-norm of the matrix ",5,[[]]],[11,"jacobian","","Create the Jacobian matrix of a vector valued function at…",5,[[["fn",8],["vec64",6]]]],[11,"output","","Print the matrix to a file",5,[[]]],[0,"mesh1d","ohsl","",null,null],[3,"Mesh1D","ohsl::mesh1d","",null,null],[11,"new","","Create a new 1D mesh ",6,[[["vector",3]]]],[11,"nnodes","","Return the number of nodal points in the mesh ",6,[[]]],[11,"nvars","","Return the number of variables stored at each node in the…",6,[[]]],[11,"coord","","Return the nodal coordinate at a specified index ",6,[[]]],[11,"set_nodes_vars","","Set the variables stored at a specified node",6,[[["vector",3]]]],[11,"get_nodes_vars","","Get the vector of variables stored at a specified node",6,[[],["vector",3]]],[11,"nodes","","Return the vector of nodal positions ",6,[[],["vector",3]]],[11,"get_interpolated_vars","","Get the variables at an interpolated position ( first…",6,[[],["vector",3]]],[11,"trapezium","","Integrate a given variable over the domain (trapezium rule)",6,[[]]],[11,"read","","Read data from a file (overwrites nodes with file nodes)",6,[[]]],[11,"output","","Print the mesh to a file",6,[[]]],[0,"newton","ohsl","",null,null],[3,"Newton","ohsl::newton","",null,null],[11,"new","","Create a new newton object",7,[[]]],[11,"tolerance","","Edit the convergence tolerance ",7,[[]]],[11,"delta","","Edit the finite difference derivative step ",7,[[]]],[11,"iterations","","Edit the maximum number of iterations ",7,[[]]],[11,"guess","","Edit the initial guess ",7,[[]]],[11,"parameters","","Return the current parameters as a tuple ",7,[[]]],[11,"solve","","Solve the equation via Newton iteration ",7,[[["fn",8]],["result",4]]],[11,"solve","","Solve the vector equation via Newton iteration ",7,[[["fn",8]],[["result",4],["vec64",6]]]],[11,"solve_jacobian","","Solve the vector equation via Newton iteration using the…",7,[[["fn",8],["fn",8]],[["result",4],["vec64",6]]]],[0,"mesh2d","ohsl","",null,null],[3,"Mesh2D","ohsl::mesh2d","",null,null],[11,"new","","Create a new 2D mesh ",8,[[["vector",3]]]],[11,"nvars","","Return the number of variables stored at each node in the…",8,[[]]],[11,"nnodes","","Return the number of nodal points in each direction ",8,[[]]],[11,"coord","","Return the spatial position of a specfied nodes as a tuple ",8,[[]]],[11,"xnodes","","Return the vector of x-nodal positions ",8,[[],["vector",3]]],[11,"ynodes","","Return the vector of y-nodal positions ",8,[[],["vector",3]]],[11,"set_nodes_vars","","Set the variables stored at a specified node ",8,[[["vector",3]]]],[11,"get_nodes_vars","","Get the vector of variables stored at a specified node",8,[[],["vector",3]]],[11,"assign","","Assign an element to all entries in the mesh",8,[[]]],[11,"cross_section_xnode","","Return a cross section of the 2D mesh at a specified x node ",8,[[],["mesh1d",3]]],[11,"cross_section_ynode","","Return a cross section of the 2D mesh at a specified y node ",8,[[],["mesh1d",3]]],[11,"var_as_matrix","","Return a matrix for a variable corresponding to each nodal…",8,[[],["matrix",3]]],[11,"apply","","Apply a function to the a specified variable in the mesh ",8,[[["fn",8]]]],[11,"trapezium","","Integrate a given variable over the domain (trapezium rule)",8,[[]]],[11,"square_trapezium","","Integrate the square of a given variable over the domain…",8,[[]]],[11,"output","","Print the mesh to a file",8,[[]]],[11,"output_var","","Print the mesh of a single variable to a file ",8,[[]]],[11,"from","ohsl::complex","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","ohsl::vector","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","ohsl::matrix","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","ohsl::mesh1d","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","ohsl::newton","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","ohsl::mesh2d","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"zero","ohsl::complex","Return the additive identity z = 0 + 0i",0,[[]]],[11,"one","","Return the multiplicative identity z = 1 + 0i",0,[[]]],[11,"abs","","",0,[[]]],[11,"clone","","Clone the complex number",0,[[]]],[11,"clone","ohsl::vector","Clone the vector",1,[[]]],[11,"clone","ohsl::matrix","Clone the matrix",5,[[]]],[11,"eq","ohsl::complex","Implement trait for equality ",0,[[["complex",3]]]],[11,"partial_cmp","","Implement trait for ordering ",0,[[["complex",3]],[["ordering",4],["option",4]]]],[11,"fmt","","Format the output ( z = x + iy = ( x, y ) )",0,[[["formatter",3]],["result",6]]],[11,"fmt","ohsl::vector","Format the output [ v_0, v_1, ... ]",1,[[["formatter",3]],["result",6]]],[11,"fmt","ohsl::matrix","Format the output ",5,[[["formatter",3]],["result",6]]],[11,"fmt","ohsl::complex","Format the output ( z = x + iy = ( x, y ) )",0,[[["formatter",3]],["result",6]]],[11,"fmt","ohsl::vector","Format the output [ v_0, v_1, ... ]",1,[[["formatter",3]],["result",6]]],[11,"fmt","ohsl::matrix","Format the output ",5,[[["formatter",3]],["result",6]]],[11,"div","ohsl::complex","Divide one complex number by another ( binary / ) ( a + ib…",0,[[]]],[11,"div","","Divide a complex number by a real scalar ( a + ib ) / r =…",0,[[]]],[11,"div","ohsl::vector","Divide a vector by a scalar (vector / scalar)",1,[[]]],[11,"div","ohsl::matrix","Divide a matrix by a scalar (matrix / scalar)",5,[[]]],[11,"sub","ohsl::complex","Subtract one complex number from another ( binary - ) ( a…",0,[[]]],[11,"sub","","Subtract a real number from a complex number ( a + ib ) -…",0,[[]]],[11,"sub","ohsl::vector","Subtract the elements of one vector from another ( binary…",1,[[]]],[11,"sub","ohsl::matrix","Subtract the elements of one matrix from another ( binary…",5,[[]]],[11,"add","ohsl::complex","Add two complex numbers together ( binary + ) ( a + ib ) +…",0,[[]]],[11,"add","","Add a complex number to a real number ( a + ib ) + c = ( a…",0,[[]]],[11,"add","ohsl::vector","Add the elements of two vectors together ( binary + )",1,[[]]],[11,"add","ohsl::matrix","Add the elements of two matrices together ( binary + )",5,[[]]],[11,"mul","ohsl::complex","Multiply two complex numbers together ( binary * ) ( a +…",0,[[]]],[11,"mul","","Multiply a complex number by a real scalar ( a + ib ) * r…",0,[[]]],[11,"mul","ohsl::vector","Multiply a vector by a scalar (vector * scalar)",1,[[]]],[11,"mul","ohsl::matrix","Multiply a matrix by a scalar (matrix * scalar)",5,[[]]],[11,"mul","","Multiply two matrices together ( matrix * matrix )",5,[[]]],[11,"mul","","Multiply a matrix with a (column) vector ( matrix * vector )",5,[[["vector",3]],["vector",3]]],[11,"neg","ohsl::complex","Return the unary negation ( unary - ) - ( a + ib ) = -a - ib",0,[[]]],[11,"neg","ohsl::vector","Return the unary negation ( unary - ) of each element",1,[[]]],[11,"neg","ohsl::matrix","Return the unary negation ( unary - ) of each element",5,[[]]],[11,"add_assign","ohsl::complex","Add a complex number to a mutable complex variable and…",0,[[]]],[11,"add_assign","","Add a real number to a mutable complex variable and assign…",0,[[]]],[11,"add_assign","ohsl::vector","Add a vector to a mutable vector and assign the result (…",1,[[]]],[11,"add_assign","","Add the same value to every element in a mutable vector ",1,[[]]],[11,"add_assign","ohsl::matrix","Add a matrix to a mutable matrix and assign the result (…",5,[[]]],[11,"add_assign","","Add the same value to every element in a mutable matrix",5,[[]]],[11,"sub_assign","ohsl::complex","Subtract a complex number from a mutable complex variable…",0,[[]]],[11,"sub_assign","","Subtract a real number from a mutable complex variable and…",0,[[]]],[11,"sub_assign","ohsl::vector","Substract a vector from a mutable vector and assign the…",1,[[]]],[11,"sub_assign","","Subtract the same value from every element in a mutable…",1,[[]]],[11,"sub_assign","ohsl::matrix","Subtract a matrix from a mutable matrix and assign the…",5,[[]]],[11,"sub_assign","","Subtract the same value from every element in a mutable…",5,[[]]],[11,"mul_assign","ohsl::complex","Multipy a mutable complex variable by a complex number and…",0,[[]]],[11,"mul_assign","","Multiply a mutable complex variable by a real number and…",0,[[]]],[11,"mul_assign","ohsl::vector","Multiply every element in a mutable vector by a scalar ",1,[[]]],[11,"mul_assign","ohsl::matrix","Multiply a mutable matrix by a scalar (matrix *= scalar)",5,[[]]],[11,"div_assign","ohsl::complex","Divide a mutable complex variable by a complex number and…",0,[[]]],[11,"div_assign","","Divide a mutable complex variable by a real number and…",0,[[]]],[11,"div_assign","ohsl::vector","Divide every element in a mutable vector by a scalar ",1,[[]]],[11,"div_assign","ohsl::matrix","Divide a mutable matrix by a scalar (matrix /= scalar)",5,[[]]],[11,"index","ohsl::vector","Indexing operator [] (read only)",1,[[]]],[11,"index","ohsl::matrix","Indexing operator [] (read only)",5,[[],["vector",3]]],[11,"index","ohsl::mesh1d","Indexing operator [] (read only) - returns the vector of…",6,[[],["vector",3]]],[11,"index","ohsl::mesh2d","Indexing operator [] (read only) - returns the vector of…",8,[[],["vector",3]]],[11,"index_mut","ohsl::vector","Indexing operator [] (read/write)",1,[[]]],[11,"index_mut","ohsl::matrix","Indexing operator [] (read/write)",5,[[],["vector",3]]],[11,"index_mut","ohsl::mesh1d","Indexing operator [] (read/write) - returns the vector of…",6,[[],["vector",3]]],[11,"index_mut","ohsl::mesh2d","Indexing operator [] (read/write) - returns the vector of…",8,[[],["vector",3]]]],"p":[[3,"Complex"],[3,"Vector"],[8,"Zero"],[8,"One"],[8,"Signed"],[3,"Matrix"],[3,"Mesh1D"],[3,"Newton"],[3,"Mesh2D"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);